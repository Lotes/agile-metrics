<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.CodeDom.Compiler" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.CodeDom" #>
<#@ parameter type="System.String[]" name="Usings" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ parameter type="System.String" name="ClassName" #>
<#@ parameter type="System.String" name="ComputeMethodName" #>
<#@ parameter type="System.Type" name="ReturnType" #>
<#@ parameter type="System.String" name="Code" #>
<#@ parameter type="System.Collections.Generic.Dictionary<System.String,System.Type>" name="Parameters" #>
<#
    Func<Type, string> type2str = type =>
    {
        using (var writer = new StringWriter())
        {
            using (var provider = CodeDomProvider.CreateProvider("CSharp"))
            {
                provider.GenerateCodeFromExpression(new CodeTypeReferenceExpression(type), writer, null);
                return writer.ToString();
            }
        }
    };

    foreach(var us in Usings)
        WriteLine("using "+us+";");
#>
namespace <#=Namespace#> {
    public class <#=ClassName#> {
        public static <#=type2str(ReturnType)#> <#=ComputeMethodName#>(<#=string.Join(", ", Parameters.Select(p => type2str(p.Value)+" "+p.Key))#>)
        {
<#=Code#>
        }
    }
}
